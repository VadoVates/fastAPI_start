# Production overrides for docker-compose.yml
services:
  db:
    # Production database settings
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c random_page_cost=1.1
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c log_min_duration_statement=200ms
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  api:
    # Production API settings
    environment:
      # Add production-specific environment variables
      LOG_LEVEL: INFO
      WORKERS: 4
    command: >
      python -m gunicorn main:app
      --bind 0.0.0.0:8000
      --workers 4
      --worker-class uvicorn.workers.UvicornWorker
      --access-logfile -
      --log-level info
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # FLUENTD - zbiera logi z FastAPI i PostgreSQL kontener√≥w
  fluentd:
    image: fluent/fluentd:latest
    container_name: fluentd
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Docker container logs
    networks:
      - app_network
    depends_on:
      - api
      - db
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # PROMETHEUS - zbiera metryki z FastAPI (response time, requests count, etc.)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=1GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - app_network
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # GRAFANA - wizualizuje dane z Prometheus (opcjonalne)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/custom.yml:ro
    ports:
      - "3000:3000"
    networks:
      - app_network
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:

networks:
  app_network:
    driver: bridge