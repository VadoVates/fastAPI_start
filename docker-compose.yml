services:
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    user: postgres
    labels:
      - "com.example.service=database"
      - "com.example.environment=production"

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DB_PROTOCOL: "${DB_PROTOCOL}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "db"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    depends_on:
      db:
        condition: service_healthy
#    ports:
#      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - "com.example.service=api"
      - "com.example.environment=production"

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.example.volume=database"

networks:
  app_network:
    driver: bridge